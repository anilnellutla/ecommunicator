package projects.ecommunicator.invoker;import java.awt.Dimension;import java.awt.EventQueue;import java.awt.Graphics;import java.awt.Image;import java.awt.MediaTracker;import java.awt.Toolkit;import java.awt.Window;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import javax.swing.JFrame;public class SplashWindow extends Window {    private Image splashImage;    private boolean paintCalled = false;    public SplashWindow(JFrame owner, Image splashImage) {        super(owner);        this.splashImage = splashImage;        MediaTracker mt = new MediaTracker(this);        mt.addImage(splashImage,0);        try {            mt.waitForID(0);        } catch(InterruptedException ie){}        int imgWidth = splashImage.getWidth(this);        int imgHeight = splashImage.getHeight(this);        setSize(imgWidth, imgHeight);        Dimension screenDim = Toolkit.getDefaultToolkit().getScreenSize();        setLocation(            (screenDim.width - imgWidth) / 2,            (screenDim.height - imgHeight) / 2        );        MouseAdapter disposeOnClick = new MouseAdapter() {            public void mouseClicked(MouseEvent evt) {                synchronized(SplashWindow.this) {                    SplashWindow.this.paintCalled = true;                    SplashWindow.this.notifyAll();                }                dispose();            }        };        addMouseListener(disposeOnClick);    }    public void update(Graphics g) {        g.setColor(getForeground());        paint(g);    }    public void paint(Graphics g) {        g.drawImage(splashImage, 0, 0, this);        if (! paintCalled) {            paintCalled = true;            synchronized (this) { notifyAll(); }        }    }    public static JFrame splash(Image splashImage) {        JFrame f = new JFrame();        SplashWindow w = new SplashWindow(f, splashImage);        // Show the window.        w.toFront();        w.show();        try{			Thread.sleep(1000);		}catch(Exception e){}        if (! EventQueue.isDispatchThread()) {            synchronized (w) {                while (! w.paintCalled) {                    try { w.wait(); } catch (InterruptedException e) {}                }            }        }        return f;    }}